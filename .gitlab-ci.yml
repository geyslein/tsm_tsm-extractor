stages:
  - freeze
  - lint
  - format
  - build
  - test
  - release

freeze-tag:
  stage: freeze
  image: alpine
  artifacts:
      expire_in: 6 weeks
      reports:
        dotenv:
          - ci-job-date.env
          - image-name.env
          - image-url.env
  script:
    - echo "CI_JOB_DATE=$(date +%Y-%m-%d-%H%M%S)" >> ci-job-date.env
    - export IMAGE_NAME=extractor
    - echo "IMAGE_NAME=${IMAGE_NAME}" >> image-name.env
    - echo "IMAGE_URL=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}" >> image-url.env

default:
  image: python:3.9

pylint:
  stage: lint
  before_script:
    - cd src
    - pip install pylint black
  script:
    - pylint Datastore Parser RawDataSource main.py --exit-zero

black:
  stage: format
  before_script:
    - cd src
    - pip install pylint black
  script:
    - black .

unit-tests:
  stage: test
  before_script:
    - cd src
    - pip install pylint black
    - pip install -r requirements.txt
  script:
    - echo "Start unit tests!"
    - python3 -m unittest discover test

build-images:
#  tags:
#    - hifis
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - export BUILD_DATE=$(date)
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --build-arg BUILD_DATE="${BUILD_DATE}" --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination ${IMAGE_URL}:${CI_JOB_DATE}

integration-test:
  stage: test
  services:
    - postgres:12-alpine
  variables:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    SQL_HOST: postgres
    DB_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${SQL_HOST}/postgres
  image:
    name: ${IMAGE_URL}:${CI_JOB_DATE}
    entrypoint: [""]
  script:
    # Try to load the fixtures to the database service without psql client and root 😁
    - echo "import psycopg2" >> load-fixtures.py
    - echo "connection = psycopg2.connect('${DB_URL}')" >> load-fixtures.py
    - echo "cursor = connection.cursor()" >> load-fixtures.py
    - echo "cursor.execute(open('postgres/postgres-ddl.sql', 'r').read())" >> load-fixtures.py
    - echo "cursor.execute(open('postgres/postgres-fixtures.sql', 'r').read())" >> load-fixtures.py
    - python3 load-fixtures.py
    # Run the simple demo with parameters fitting into the fixtures loaded before
    - python3 src/main.py parse -p AnotherCustomParser -t ${DB_URL} -s https://example.com/ -d ce2b4fb6-d9de-11eb-a236-125e5a40a845

add-release-tags:
  stage: release
  rules:
    - if: '$CI_COMMIT_REF_SLUG == "master"'
      when: on_success
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag ${IMAGE_URL}:${CI_JOB_DATE} latest